{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"container mx-auto px-6 py-8\"\n};\nvar _hoisted_2 = {\n  \"class\": \"mt-8\"\n};\nvar _hoisted_3 = {\n  key: 0,\n  \"class\": \"text-center\"\n};\nvar _hoisted_4 = {\n  key: 1,\n  \"class\": \"text-center\"\n};\nvar _hoisted_5 = {\n  \"class\": \"text-red-600\"\n};\nvar _hoisted_6 = {\n  key: 2,\n  \"class\": \"text-center\"\n};\nvar _hoisted_7 = {\n  key: 3,\n  \"class\": \"space-y-4\"\n};\nvar _hoisted_8 = {\n  \"class\": \"text-lg font-semibold text-gray-800\"\n};\nvar _hoisted_9 = {\n  \"class\": \"text-gray-600\"\n};\nvar _hoisted_10 = {\n  \"class\": \"text-sm text-gray-500 mt-1\"\n};\nvar _hoisted_11 = [\"onClick\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", {\n    \"class\": \"text-gray-700 text-3xl font-medium\"\n  }, \"Notifications\", -1 /* HOISTED */)), _cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n    \"class\": \"mt-4 text-gray-600\"\n  }, \"View and manage alerts for low stock batches and expired batches.\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", {\n    \"class\": \"text-gray-600\"\n  }, \"Loading notifications...\", -1 /* HOISTED */)]))) : _ctx.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"p\", _hoisted_5, _toDisplayString(_ctx.error), 1 /* TEXT */)])) : _ctx.notifications.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _cache[1] || (_cache[1] = [_createElementVNode(\"p\", {\n    \"class\": \"text-gray-600\"\n  }, \"No notifications at this time.\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.notifications, function (notification) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: notification.id,\n      \"class\": _normalizeClass([\"bg-white shadow-md rounded-lg p-4 flex items-center justify-between\", {\n        'border-l-4 border-yellow-500': notification.notification_type === 'LOW_STOCK',\n        'border-l-4 border-red-500': notification.notification_type === 'EXPIRED'\n      }])\n    }, [_createElementVNode(\"div\", null, [_createElementVNode(\"h2\", _hoisted_8, _toDisplayString(_ctx.getNotificationTitle(notification)), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_9, _toDisplayString(_ctx.getNotificationDescription(notification)), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_10, _toDisplayString(_ctx.formatDate(notification.created_at)), 1 /* TEXT */)]), !notification.seen ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: function onClick($event) {\n        return _ctx.markAsSeen(notification.id);\n      },\n      \"class\": \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300\"\n    }, \" Mark as Seen \", 8 /* PROPS */, _hoisted_11)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]))])]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","loading","_hoisted_3","_cache","error","_hoisted_4","_hoisted_5","_toDisplayString","notifications","length","_hoisted_6","_hoisted_7","_Fragment","_renderList","notification","id","_normalizeClass","notification_type","_hoisted_8","getNotificationTitle","_hoisted_9","getNotificationDescription","_hoisted_10","formatDate","created_at","seen","onClick","$event","markAsSeen","_hoisted_11","_createCommentVNode"],"sources":["C:\\Inventory-Clinic-MCC\\frontend\\src\\views\\Notifications.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-6 py-8\">\r\n    <h1 class=\"text-gray-700 text-3xl font-medium\">Notifications</h1>\r\n    <p class=\"mt-4 text-gray-600\">View and manage alerts for low stock batches and expired batches.</p>\r\n    \r\n    <div class=\"mt-8\">\r\n      <div v-if=\"loading\" class=\"text-center\">\r\n        <p class=\"text-gray-600\">Loading notifications...</p>\r\n      </div>\r\n      <div v-else-if=\"error\" class=\"text-center\">\r\n        <p class=\"text-red-600\">{{ error }}</p>\r\n      </div>\r\n      <div v-else-if=\"notifications.length === 0\" class=\"text-center\">\r\n        <p class=\"text-gray-600\">No notifications at this time.</p>\r\n      </div>\r\n      <div v-else class=\"space-y-4\">\r\n        <div v-for=\"notification in notifications\" :key=\"notification.id\" \r\n             class=\"bg-white shadow-md rounded-lg p-4 flex items-center justify-between\"\r\n             :class=\"{ 'border-l-4 border-yellow-500': notification.notification_type === 'LOW_STOCK',\r\n                      'border-l-4 border-red-500': notification.notification_type === 'EXPIRED' }\">\r\n          <div>\r\n            <h2 class=\"text-lg font-semibold text-gray-800\">\r\n              {{ getNotificationTitle(notification) }}\r\n            </h2>\r\n            <p class=\"text-gray-600\">{{ getNotificationDescription(notification) }}</p>\r\n            <p class=\"text-sm text-gray-500 mt-1\">{{ formatDate(notification.created_at) }}</p>\r\n          </div>\r\n          <button @click=\"markAsSeen(notification.id)\" \r\n                  class=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300\"\r\n                  v-if=\"!notification.seen\">\r\n            Mark as Seen\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport axios from 'axios'\r\n\r\nconst notifications = ref([])\r\nconst loading = ref(true)\r\nconst error = ref(null)\r\nconst API_URL = 'http://localhost:5000/api/inventory'\r\nconst fetchNotifications = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await axios.get(${API_URL}`/notifications`)\r\n    notifications.value = response.data.data\r\n  } catch (err) {\r\n    error.value = 'Failed to fetch notifications. Please try again later.'\r\n    console.error('Error fetching notifications:', err)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst markAsSeen = async (id) => {\r\n  try {\r\n    await axios.patch(`{}/api/notifications/${id}`, { seen: true })\r\n    const index = notifications.value.findIndex(n => n.id === id)\r\n    if (index !== -1) {\r\n      notifications.value[index].seen = true\r\n    }\r\n  } catch (err) {\r\n    console.error('Error marking notification as seen:', err)\r\n  }\r\n}\r\n\r\nconst getNotificationTitle = (notification) => {\r\n  switch (notification.notification_type) {\r\n    case 'LOW_STOCK':\r\n      return 'Low Stock Alert'\r\n    case 'EXPIRED':\r\n      return 'Batch Expired'\r\n    default:\r\n      return 'Notification'\r\n  }\r\n}\r\n\r\nconst getNotificationDescription = (notification) => {\r\n  const itemName = notification.batch.inventoryItem.name\r\n  const batchNumber = notification.batch.batch_number\r\n  switch (notification.notification_type) {\r\n    case 'LOW_STOCK':\r\n      return `Batch ${batchNumber} of ${itemName} is running low. Current stock: ${notification.quantity_left}`\r\n    case 'EXPIRED':\r\n      return `Batch ${batchNumber} of ${itemName} has expired on ${formatDate(notification.expiry_date)}`\r\n    default:\r\n      return 'Please check your inventory'\r\n  }\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nonMounted(fetchNotifications)\r\n</script>"],"mappings":";;EACO,SAAM;AAA6B;;EAIjC,SAAM;AAAM;;EALrBA,GAAA;EAM0B,SAAM;;;EANhCA,GAAA;EAS6B,SAAM;;;EACxB,SAAM;AAAc;;EAV/BA,GAAA;EAYkD,SAAM;;;EAZxDA,GAAA;EAekB,SAAM;;;EAMR,SAAM;AAAqC;;EAG5C,SAAM;AAAe;;EACrB,SAAM;AAA4B;kBAzBjD;;uBACEC,mBAAA,CAkCM,OAlCNC,UAkCM,G,0BAjCJC,mBAAA,CAAiE;IAA7D,SAAM;EAAoC,GAAC,eAAa,sB,0BAC5DA,mBAAA,CAAmG;IAAhG,SAAM;EAAoB,GAAC,mEAAiE,sBAE/FA,mBAAA,CA6BM,OA7BNC,UA6BM,GA5BOC,IAAA,CAAAC,OAAO,I,cAAlBL,mBAAA,CAEM,OAFNM,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJL,mBAAA,CAAqD;IAAlD,SAAM;EAAe,GAAC,0BAAwB,oB,MAEnCE,IAAA,CAAAI,KAAK,I,cAArBR,mBAAA,CAEM,OAFNS,UAEM,GADJP,mBAAA,CAAuC,KAAvCQ,UAAuC,EAAAC,gBAAA,CAAZP,IAAA,CAAAI,KAAK,iB,KAElBJ,IAAA,CAAAQ,aAAa,CAACC,MAAM,U,cAApCb,mBAAA,CAEM,OAFNc,UAEM,EAAAP,MAAA,QAAAA,MAAA,OADJL,mBAAA,CAA2D;IAAxD,SAAM;EAAe,GAAC,gCAA8B,oB,qBAEzDF,mBAAA,CAkBM,OAlBNe,UAkBM,I,kBAjBJf,mBAAA,CAgBMgB,SAAA,QAhCdC,WAAA,CAgBoCb,IAAA,CAAAQ,aAAa,EAhBjD,UAgBoBM,YAAY;yBAAxBlB,mBAAA,CAgBM;MAhBsCD,GAAG,EAAEmB,YAAY,CAACC,EAAE;MAC3D,SAjBbC,eAAA,EAiBmB,qEAAqE;QAAA,gCACjCF,YAAY,CAACG,iBAAiB;qCAAsEH,YAAY,CAACG,iBAAiB;MAAA;QAE/KnB,mBAAA,CAMM,cALJA,mBAAA,CAEK,MAFLoB,UAEK,EAAAX,gBAAA,CADAP,IAAA,CAAAmB,oBAAoB,CAACL,YAAY,mBAEtChB,mBAAA,CAA2E,KAA3EsB,UAA2E,EAAAb,gBAAA,CAA/CP,IAAA,CAAAqB,0BAA0B,CAACP,YAAY,mBACnEhB,mBAAA,CAAmF,KAAnFwB,WAAmF,EAAAf,gBAAA,CAA1CP,IAAA,CAAAuB,UAAU,CAACT,YAAY,CAACU,UAAU,kB,IAI9DV,YAAY,CAACW,IAAI,I,cAFhC7B,mBAAA,CAIS;MA/BnBD,GAAA;MA2BmB+B,OAAK,WAALA,OAAKA,CAAAC,MAAA;QAAA,OAAE3B,IAAA,CAAA4B,UAAU,CAACd,YAAY,CAACC,EAAE;MAAA;MAClC,SAAM;OACoB,gBAElC,iBA/BVc,WAAA,KAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}